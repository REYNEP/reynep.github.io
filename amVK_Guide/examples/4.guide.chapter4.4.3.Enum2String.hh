#include <vulkan/vulkan.h>
#include <string>
#include <vector>

std::string vulkan_colorSpace_name(VkColorSpaceKHR ColorSpace) {
    switch(ColorSpace)
    {
        #define CS(r) case VK_COLOR_SPACE_##r: return #r
        CS(SRGB_NONLINEAR_KHR);
        CS(DISPLAY_P3_NONLINEAR_EXT);
        CS(EXTENDED_SRGB_LINEAR_EXT);
        CS(DISPLAY_P3_LINEAR_EXT);
        CS(DCI_P3_NONLINEAR_EXT);
        CS(BT709_LINEAR_EXT);
        CS(BT709_NONLINEAR_EXT);
        CS(BT2020_LINEAR_EXT);
        CS(HDR10_ST2084_EXT);
        CS(DOLBYVISION_EXT);
        CS(HDR10_HLG_EXT);
        CS(ADOBERGB_LINEAR_EXT);
        CS(ADOBERGB_NONLINEAR_EXT);
        CS(PASS_THROUGH_EXT);
        CS(EXTENDED_SRGB_NONLINEAR_EXT);
        CS(DISPLAY_NATIVE_AMD);
        CS(MAX_ENUM_KHR);
        default: {
            return std::string("Unknown VkColorSpaceKHR => ") + std::to_string(ColorSpace);
        }
    }
}
#undef CS
std::string vulkan_imageFormat_name(VkFormat imageFormat) {
    switch(imageFormat)
    {
        #define IMG_FMT(r) case VK_FORMAT_##r: return #r
        IMG_FMT(UNDEFINED);
        IMG_FMT(R4G4_UNORM_PACK8);
        IMG_FMT(R4G4B4A4_UNORM_PACK16);
        IMG_FMT(B4G4R4A4_UNORM_PACK16);
        IMG_FMT(R5G6B5_UNORM_PACK16);
        IMG_FMT(B5G6R5_UNORM_PACK16);
        IMG_FMT(R5G5B5A1_UNORM_PACK16);
        IMG_FMT(B5G5R5A1_UNORM_PACK16);
        IMG_FMT(A1R5G5B5_UNORM_PACK16);
        IMG_FMT(R8_UNORM);
        IMG_FMT(R8_SNORM);
        IMG_FMT(R8_USCALED);
        IMG_FMT(R8_SSCALED);
        IMG_FMT(R8_UINT);
        IMG_FMT(R8_SINT);
        IMG_FMT(R8_SRGB);
        IMG_FMT(R8G8_UNORM);
        IMG_FMT(R8G8_SNORM);
        IMG_FMT(R8G8_USCALED);
        IMG_FMT(R8G8_SSCALED);
        IMG_FMT(R8G8_UINT);
        IMG_FMT(R8G8_SINT);
        IMG_FMT(R8G8_SRGB);
        IMG_FMT(R8G8B8_UNORM);
        IMG_FMT(R8G8B8_SNORM);
        IMG_FMT(R8G8B8_USCALED);
        IMG_FMT(R8G8B8_SSCALED);
        IMG_FMT(R8G8B8_UINT);
        IMG_FMT(R8G8B8_SINT);
        IMG_FMT(R8G8B8_SRGB);
        IMG_FMT(B8G8R8_UNORM);
        IMG_FMT(B8G8R8_SNORM);
        IMG_FMT(B8G8R8_USCALED);
        IMG_FMT(B8G8R8_SSCALED);
        IMG_FMT(B8G8R8_UINT);
        IMG_FMT(B8G8R8_SINT);
        IMG_FMT(B8G8R8_SRGB);
        IMG_FMT(R8G8B8A8_UNORM);
        IMG_FMT(R8G8B8A8_SNORM);
        IMG_FMT(R8G8B8A8_USCALED);
        IMG_FMT(R8G8B8A8_SSCALED);
        IMG_FMT(R8G8B8A8_UINT);
        IMG_FMT(R8G8B8A8_SINT);
        IMG_FMT(R8G8B8A8_SRGB);
        IMG_FMT(B8G8R8A8_UNORM);
        IMG_FMT(B8G8R8A8_SNORM);
        IMG_FMT(B8G8R8A8_USCALED);
        IMG_FMT(B8G8R8A8_SSCALED);
        IMG_FMT(B8G8R8A8_UINT);
        IMG_FMT(B8G8R8A8_SINT);
        IMG_FMT(B8G8R8A8_SRGB);
        IMG_FMT(A8B8G8R8_UNORM_PACK32);
        IMG_FMT(A8B8G8R8_SNORM_PACK32);
        IMG_FMT(A8B8G8R8_USCALED_PACK32);
        IMG_FMT(A8B8G8R8_SSCALED_PACK32);
        IMG_FMT(A8B8G8R8_UINT_PACK32);
        IMG_FMT(A8B8G8R8_SINT_PACK32);
        IMG_FMT(A8B8G8R8_SRGB_PACK32);
        IMG_FMT(A2R10G10B10_UNORM_PACK32);
        IMG_FMT(A2R10G10B10_SNORM_PACK32);
        IMG_FMT(A2R10G10B10_USCALED_PACK32);
        IMG_FMT(A2R10G10B10_SSCALED_PACK32);
        IMG_FMT(A2R10G10B10_UINT_PACK32);
        IMG_FMT(A2R10G10B10_SINT_PACK32);
        IMG_FMT(A2B10G10R10_UNORM_PACK32);
        IMG_FMT(A2B10G10R10_SNORM_PACK32);
        IMG_FMT(A2B10G10R10_USCALED_PACK32);
        IMG_FMT(A2B10G10R10_SSCALED_PACK32);
        IMG_FMT(A2B10G10R10_UINT_PACK32);
        IMG_FMT(A2B10G10R10_SINT_PACK32);
        IMG_FMT(R16_UNORM);
        IMG_FMT(R16_SNORM);
        IMG_FMT(R16_USCALED);
        IMG_FMT(R16_SSCALED);
        IMG_FMT(R16_UINT);
        IMG_FMT(R16_SINT);
        IMG_FMT(R16_SFLOAT);
        IMG_FMT(R16G16_UNORM);
        IMG_FMT(R16G16_SNORM);
        IMG_FMT(R16G16_USCALED);
        IMG_FMT(R16G16_SSCALED);
        IMG_FMT(R16G16_UINT);
        IMG_FMT(R16G16_SINT);
        IMG_FMT(R16G16_SFLOAT);
        IMG_FMT(R16G16B16_UNORM);
        IMG_FMT(R16G16B16_SNORM);
        IMG_FMT(R16G16B16_USCALED);
        IMG_FMT(R16G16B16_SSCALED);
        IMG_FMT(R16G16B16_UINT);
        IMG_FMT(R16G16B16_SINT);
        IMG_FMT(R16G16B16_SFLOAT);
        IMG_FMT(R16G16B16A16_UNORM);
        IMG_FMT(R16G16B16A16_SNORM);
        IMG_FMT(R16G16B16A16_USCALED);
        IMG_FMT(R16G16B16A16_SSCALED);
        IMG_FMT(R16G16B16A16_UINT);
        IMG_FMT(R16G16B16A16_SINT);
        IMG_FMT(R16G16B16A16_SFLOAT);
        IMG_FMT(R32_UINT);
        IMG_FMT(R32_SINT);
        IMG_FMT(R32_SFLOAT);
        IMG_FMT(R32G32_UINT);
        IMG_FMT(R32G32_SINT);
        IMG_FMT(R32G32_SFLOAT);
        IMG_FMT(R32G32B32_UINT);
        IMG_FMT(R32G32B32_SINT);
        IMG_FMT(R32G32B32_SFLOAT);
        IMG_FMT(R32G32B32A32_UINT);
        IMG_FMT(R32G32B32A32_SINT);
        IMG_FMT(R32G32B32A32_SFLOAT);
        IMG_FMT(R64_UINT);
        IMG_FMT(R64_SINT);
        IMG_FMT(R64_SFLOAT);
        IMG_FMT(R64G64_UINT);
        IMG_FMT(R64G64_SINT);
        IMG_FMT(R64G64_SFLOAT);
        IMG_FMT(R64G64B64_UINT);
        IMG_FMT(R64G64B64_SINT);
        IMG_FMT(R64G64B64_SFLOAT);
        IMG_FMT(R64G64B64A64_UINT);
        IMG_FMT(R64G64B64A64_SINT);
        IMG_FMT(R64G64B64A64_SFLOAT);
        IMG_FMT(B10G11R11_UFLOAT_PACK32);
        IMG_FMT(E5B9G9R9_UFLOAT_PACK32);
        IMG_FMT(D16_UNORM);
        IMG_FMT(X8_D24_UNORM_PACK32);
        IMG_FMT(D32_SFLOAT);
        IMG_FMT(S8_UINT);
        IMG_FMT(D16_UNORM_S8_UINT);
        IMG_FMT(D24_UNORM_S8_UINT);
        IMG_FMT(D32_SFLOAT_S8_UINT);
        IMG_FMT(BC1_RGB_UNORM_BLOCK);
        IMG_FMT(BC1_RGB_SRGB_BLOCK);
        IMG_FMT(BC1_RGBA_UNORM_BLOCK);
        IMG_FMT(BC1_RGBA_SRGB_BLOCK);
        IMG_FMT(BC2_UNORM_BLOCK);
        IMG_FMT(BC2_SRGB_BLOCK);
        IMG_FMT(BC3_UNORM_BLOCK);
        IMG_FMT(BC3_SRGB_BLOCK);
        IMG_FMT(BC4_UNORM_BLOCK);
        IMG_FMT(BC4_SNORM_BLOCK);
        IMG_FMT(BC5_UNORM_BLOCK);
        IMG_FMT(BC5_SNORM_BLOCK);
        IMG_FMT(BC6H_UFLOAT_BLOCK);
        IMG_FMT(BC6H_SFLOAT_BLOCK);
        IMG_FMT(BC7_UNORM_BLOCK);
        IMG_FMT(BC7_SRGB_BLOCK);
        IMG_FMT(ETC2_R8G8B8_UNORM_BLOCK);
        IMG_FMT(ETC2_R8G8B8_SRGB_BLOCK);
        IMG_FMT(ETC2_R8G8B8A1_UNORM_BLOCK);
        IMG_FMT(ETC2_R8G8B8A1_SRGB_BLOCK);
        IMG_FMT(ETC2_R8G8B8A8_UNORM_BLOCK);
        IMG_FMT(ETC2_R8G8B8A8_SRGB_BLOCK);
        IMG_FMT(EAC_R11_UNORM_BLOCK);
        IMG_FMT(EAC_R11_SNORM_BLOCK);
        IMG_FMT(EAC_R11G11_UNORM_BLOCK);
        IMG_FMT(EAC_R11G11_SNORM_BLOCK);
        IMG_FMT(ASTC_4x4_UNORM_BLOCK);
        IMG_FMT(ASTC_4x4_SRGB_BLOCK);
        IMG_FMT(ASTC_5x4_UNORM_BLOCK);
        IMG_FMT(ASTC_5x4_SRGB_BLOCK);
        IMG_FMT(ASTC_5x5_UNORM_BLOCK);
        IMG_FMT(ASTC_5x5_SRGB_BLOCK);
        IMG_FMT(ASTC_6x5_UNORM_BLOCK);
        IMG_FMT(ASTC_6x5_SRGB_BLOCK);
        IMG_FMT(ASTC_6x6_UNORM_BLOCK);
        IMG_FMT(ASTC_6x6_SRGB_BLOCK);
        IMG_FMT(ASTC_8x5_UNORM_BLOCK);
        IMG_FMT(ASTC_8x5_SRGB_BLOCK);
        IMG_FMT(ASTC_8x6_UNORM_BLOCK);
        IMG_FMT(ASTC_8x6_SRGB_BLOCK);
        IMG_FMT(ASTC_8x8_UNORM_BLOCK);
        IMG_FMT(ASTC_8x8_SRGB_BLOCK);
        IMG_FMT(ASTC_10x5_UNORM_BLOCK);
        IMG_FMT(ASTC_10x5_SRGB_BLOCK);
        IMG_FMT(ASTC_10x6_UNORM_BLOCK);
        IMG_FMT(ASTC_10x6_SRGB_BLOCK);
        IMG_FMT(ASTC_10x8_UNORM_BLOCK);
        IMG_FMT(ASTC_10x8_SRGB_BLOCK);
        IMG_FMT(ASTC_10x10_UNORM_BLOCK);
        IMG_FMT(ASTC_10x10_SRGB_BLOCK);
        IMG_FMT(ASTC_12x10_UNORM_BLOCK);
        IMG_FMT(ASTC_12x10_SRGB_BLOCK);
        IMG_FMT(ASTC_12x12_UNORM_BLOCK);
        IMG_FMT(ASTC_12x12_SRGB_BLOCK);
        IMG_FMT(G8B8G8R8_422_UNORM);
        IMG_FMT(B8G8R8G8_422_UNORM);
        IMG_FMT(G8_B8_R8_3PLANE_420_UNORM);
        IMG_FMT(G8_B8R8_2PLANE_420_UNORM);
        IMG_FMT(G8_B8_R8_3PLANE_422_UNORM);
        IMG_FMT(G8_B8R8_2PLANE_422_UNORM);
        IMG_FMT(G8_B8_R8_3PLANE_444_UNORM);
        IMG_FMT(R10X6_UNORM_PACK16);
        IMG_FMT(R10X6G10X6_UNORM_2PACK16);
        IMG_FMT(R10X6G10X6B10X6A10X6_UNORM_4PACK16);
        IMG_FMT(G10X6B10X6G10X6R10X6_422_UNORM_4PACK16);
        IMG_FMT(B10X6G10X6R10X6G10X6_422_UNORM_4PACK16);
        IMG_FMT(G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16);
        IMG_FMT(G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16);
        IMG_FMT(G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16);
        IMG_FMT(G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16);
        IMG_FMT(G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16);
        IMG_FMT(R12X4_UNORM_PACK16);
        IMG_FMT(R12X4G12X4_UNORM_2PACK16);
        IMG_FMT(R12X4G12X4B12X4A12X4_UNORM_4PACK16);
        IMG_FMT(G12X4B12X4G12X4R12X4_422_UNORM_4PACK16);
        IMG_FMT(B12X4G12X4R12X4G12X4_422_UNORM_4PACK16);
        IMG_FMT(G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16);
        IMG_FMT(G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16);
        IMG_FMT(G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16);
        IMG_FMT(G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16);
        IMG_FMT(G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16);
        IMG_FMT(G16B16G16R16_422_UNORM);
        IMG_FMT(B16G16R16G16_422_UNORM);
        IMG_FMT(G16_B16_R16_3PLANE_420_UNORM);
        IMG_FMT(G16_B16R16_2PLANE_420_UNORM);
        IMG_FMT(G16_B16_R16_3PLANE_422_UNORM);
        IMG_FMT(G16_B16R16_2PLANE_422_UNORM);
        IMG_FMT(G16_B16_R16_3PLANE_444_UNORM);
        IMG_FMT(G8_B8R8_2PLANE_444_UNORM);
        IMG_FMT(G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16);
        IMG_FMT(G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16);
        IMG_FMT(G16_B16R16_2PLANE_444_UNORM);
        IMG_FMT(A4R4G4B4_UNORM_PACK16);
        IMG_FMT(A4B4G4R4_UNORM_PACK16);
        IMG_FMT(ASTC_4x4_SFLOAT_BLOCK);
        IMG_FMT(ASTC_5x4_SFLOAT_BLOCK);
        IMG_FMT(ASTC_5x5_SFLOAT_BLOCK);
        IMG_FMT(ASTC_6x5_SFLOAT_BLOCK);
        IMG_FMT(ASTC_6x6_SFLOAT_BLOCK);
        IMG_FMT(ASTC_8x5_SFLOAT_BLOCK);
        IMG_FMT(ASTC_8x6_SFLOAT_BLOCK);
        IMG_FMT(ASTC_8x8_SFLOAT_BLOCK);
        IMG_FMT(ASTC_10x5_SFLOAT_BLOCK);
        IMG_FMT(ASTC_10x6_SFLOAT_BLOCK);
        IMG_FMT(ASTC_10x8_SFLOAT_BLOCK);
        IMG_FMT(ASTC_10x10_SFLOAT_BLOCK);
        IMG_FMT(ASTC_12x10_SFLOAT_BLOCK);
        IMG_FMT(ASTC_12x12_SFLOAT_BLOCK);
        IMG_FMT(A1B5G5R5_UNORM_PACK16);
        IMG_FMT(A8_UNORM);
        IMG_FMT(PVRTC1_2BPP_UNORM_BLOCK_IMG);
        IMG_FMT(PVRTC1_4BPP_UNORM_BLOCK_IMG);
        IMG_FMT(PVRTC2_2BPP_UNORM_BLOCK_IMG);
        IMG_FMT(PVRTC2_4BPP_UNORM_BLOCK_IMG);
        IMG_FMT(PVRTC1_2BPP_SRGB_BLOCK_IMG);
        IMG_FMT(PVRTC1_4BPP_SRGB_BLOCK_IMG);
        IMG_FMT(PVRTC2_2BPP_SRGB_BLOCK_IMG);
        IMG_FMT(PVRTC2_4BPP_SRGB_BLOCK_IMG);
        IMG_FMT(R16G16_SFIXED5_NV);
        IMG_FMT(MAX_ENUM);
        default: {
            return std::string("Unknown VkFormat => ") + std::to_string(imageFormat);
        }
    }
}
#undef IMG_FMT



/** Will be used in the next part */
std::vector<std::string> vulkan_queueFlags_Names(VkQueueFlags queueFlags) {
    std::vector<std::string> queueFlags_STR_ARRAY;

    if (queueFlags & VK_QUEUE_GRAPHICS_BIT)         { queueFlags_STR_ARRAY.push_back("VK_QUEUE_GRAPHICS_BIT"); }
    if (queueFlags & VK_QUEUE_COMPUTE_BIT)          { queueFlags_STR_ARRAY.push_back("VK_QUEUE_COMPUTE_BIT"); }
    if (queueFlags & VK_QUEUE_TRANSFER_BIT)         { queueFlags_STR_ARRAY.push_back("VK_QUEUE_TRANSFER_BIT"); }
    if (queueFlags & VK_QUEUE_SPARSE_BINDING_BIT)   { queueFlags_STR_ARRAY.push_back("VK_QUEUE_SPARSE_BINDING_BIT"); }
    if (queueFlags & VK_QUEUE_PROTECTED_BIT)        { queueFlags_STR_ARRAY.push_back("VK_QUEUE_PROTECTED_BIT"); }
    if (queueFlags & VK_QUEUE_VIDEO_DECODE_BIT_KHR) { queueFlags_STR_ARRAY.push_back("VK_QUEUE_VIDEO_DECODE_BIT_KHR"); }
    if (queueFlags & VK_QUEUE_VIDEO_ENCODE_BIT_KHR) { queueFlags_STR_ARRAY.push_back("VK_QUEUE_VIDEO_ENCODE_BIT_KHR"); }
    if (queueFlags & VK_QUEUE_OPTICAL_FLOW_BIT_NV)  { queueFlags_STR_ARRAY.push_back("VK_QUEUE_OPTICAL_FLOW_BIT_NV"); }

    return queueFlags_STR_ARRAY;
}

std::vector<std::string> vulkan_imageUsageFlags_Names(VkImageUsageFlags imageUsageFlags) {
    std::vector<std::string> imageUsageFlags_STR_ARRAY;

    #define STR(r) if (imageUsageFlags & ##r) { imageUsageFlags_STR_ARRAY.push_back(#r); }
    STR(VK_IMAGE_USAGE_TRANSFER_SRC_BIT);
    STR(VK_IMAGE_USAGE_TRANSFER_DST_BIT);
    STR(VK_IMAGE_USAGE_SAMPLED_BIT);
    STR(VK_IMAGE_USAGE_STORAGE_BIT);
    STR(VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT);
    STR(VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT);
    STR(VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT);
    STR(VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT);
    STR(VK_IMAGE_USAGE_HOST_TRANSFER_BIT);
    STR(VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR);
    STR(VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR);
    STR(VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR);
    STR(VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT);
    STR(VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR);
    STR(VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR);
    STR(VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR);
    STR(VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR);
    STR(VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT);
    STR(VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI);
    STR(VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM);
    STR(VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM);
    STR(VK_IMAGE_USAGE_VIDEO_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR);
    STR(VK_IMAGE_USAGE_VIDEO_ENCODE_EMPHASIS_MAP_BIT_KHR);
    STR(VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV);
    STR(VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT);

    return imageUsageFlags_STR_ARRAY;
}
#undef STR

std::vector<std::string> vulkan_compositeAlphaFlags_Names(VkCompositeAlphaFlagsKHR compositeAlphaFlags) {
    std::vector<std::string> compositeAlphaFlags_STR_ARRAY;

    if (compositeAlphaFlags & VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR)             { compositeAlphaFlags_STR_ARRAY.push_back("VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR"); }
    if (compositeAlphaFlags & VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR)     { compositeAlphaFlags_STR_ARRAY.push_back("VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR"); }
    if (compositeAlphaFlags & VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR)    { compositeAlphaFlags_STR_ARRAY.push_back("VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR"); }
    if (compositeAlphaFlags & VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR)            { compositeAlphaFlags_STR_ARRAY.push_back("VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR"); }
    if (compositeAlphaFlags & VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR)     { compositeAlphaFlags_STR_ARRAY.push_back("VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR"); }

    return compositeAlphaFlags_STR_ARRAY;
}

std::vector<std::string> vulkan_surfaceTransformFlags_Names(VkSurfaceTransformFlagsKHR surfaceTransformFlags) {
    std::vector<std::string> surfaceTransformFlags_STR_ARRAY;

    #define STR(r) if (surfaceTransformFlags & ##r) { surfaceTransformFlags_STR_ARRAY.push_back(#r); }
    STR(VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR);
    STR(VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR);
    STR(VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR);
    STR(VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR);
    STR(VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR);
    STR(VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR);
    STR(VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR);
    STR(VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR);
    STR(VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR);
    
    return surfaceTransformFlags_STR_ARRAY;
}
#undef STR
/** Will be used in the next part */